rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper to check if the authenticated user's profile has a matching publicMerchantId
    function isUserAssociatedWithPublicId(publicId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/merchants/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/merchants/$(request.auth.uid)).data.publicMerchantId == publicId;
    }

    // Merchants Collection
    match /merchants/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Menu Items Collection
    match /menuItems/{itemId} {
      allow read: if true;
      allow create: if request.auth != null &&
                    request.resource.data.merchantId is string &&
                    isUserAssociatedWithPublicId(request.resource.data.merchantId);

      allow update: if request.auth != null &&
                    resource.data.merchantId is string &&
                    isUserAssociatedWithPublicId(resource.data.merchantId);

      allow delete: if request.auth != null &&
                    resource.data.merchantId is string &&
                    isUserAssociatedWithPublicId(resource.data.merchantId);
    }

    // Orders Collection
    match /orders/{orderId} {
      // Create: Must be authenticated, merchantPublicId must be a string, and customerUid must match auth UID
      allow create: if request.auth != null &&
                    request.resource.data.merchantPublicId is string &&
                    request.resource.data.customerUid == request.auth.uid;

      // Read: Allowed for merchant (if associated) OR the customer who placed the order
      allow read: if (request.auth != null &&
                      (isUserAssociatedWithPublicId(resource.data.merchantPublicId) ||
                       resource.data.customerUid == request.auth.uid));

      // Update: Only merchant can update their own order
      allow update: if request.auth != null &&
                    resource.data.merchantPublicId is string &&
                    isUserAssociatedWithPublicId(resource.data.merchantPublicId);

      // Delete: Disabled for now (for safety and audit reasons)
      allow delete: if false;
    }
  }
}
